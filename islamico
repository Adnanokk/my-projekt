<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Prayer Tracker</title>
    <style>
        :root {
            --primary: #2563eb;
            --success: #22c55e;
            --danger: #ef4444;
            --gray-50: #f9fafb;
            --gray-100: #f3f4f6;
            --gray-800: #1f2937;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: system-ui, sans-serif;
            background-color: var(--gray-50);
            color: var(--gray-800);
            line-height: 1.5;
        }

        .container {
            max-width: 1024px;
            margin: 0 auto;
            padding: 1rem;
        }

        header {
            background: linear-gradient(135deg, var(--gray-800), #1a365d);
            color: white;
            padding: 1.5rem;
            text-align: center;
            margin-bottom: 2rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .header-title {
            font-size: 2.5rem;
            font-weight: 700;
        }

        .date-display {
            font-size: 1.2rem;
            opacity: 0.9;
        }

        .timer {
            font-size: 1.5rem;
            margin-top: 0.5rem;
            font-family: monospace;
        }

        .calendar {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
            gap: 0.75rem;
            margin-bottom: 2rem;
        }

        .day {
            background-color: white;
            border: 1px solid var(--gray-100);
            padding: 1rem;
            text-align: center;
            cursor: pointer;
            border-radius: 0.5rem;
            transition: all 0.2s;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .day:hover {
            transform: translateY(-2px);
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        }

        .day.completed {
            background-color: var(--success);
            color: white;
            border-color: var(--success);
        }

        .day.incomplete {
            background-color: var(--danger);
            color: white;
            border-color: var(--danger);
        }

        .prayer-status {
            background: white;
            padding: 1.5rem;
            border-radius: 0.5rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .prayer-status h3 {
            margin-bottom: 1rem;
            color: var(--gray-800);
        }

        .button {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 0.375rem;
            cursor: pointer;
            font-weight: 500;
            transition: opacity 0.2s;
        }

        .button:hover {
            opacity: 0.9;
        }

        .button-group {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
            gap: 0.5rem;
            margin-top: 1rem;
        }

        .prayer-button {
            background-color: var(--primary);
            color: white;
        }

        .prayer-button.completed {
            background-color: var(--success);
        }

        .prayer-button.no {
            background-color: var(--danger);
        }

        .yes-button {
            background-color: var(--success);
            color: white;
        }

        .no-button {
            background-color: var(--danger);
            color: white;
        }

        .reset-button {
            background-color: var(--gray-800);
            color: white;
        }

        .hidden {
            display: none;
        }

        @media (min-width: 640px) {
            .calendar {
                grid-template-columns: repeat(7, 1fr);
            }
        }
    </style>
</head>
<body>
    <header>
        <div>
            <h1 class="header-title">Prayer Tracker</h1>
            <div class="date-display" id="currentDate"></div>
            <div class="timer" id="timer"></div>
        </div>
    </header>
    <div class="container">
        <div class="calendar" id="calendar"></div>
        <div class="prayer-status hidden" id="prayerStatus">
            <h3 id="selectedDate"></h3>
            <p id="prayerQuestion" class="hidden"></p>
            <div class="button-group" id="responseButtons">
                <button class="button yes-button" onclick="handleResponse(true)">Yes</button>
                <button class="button no-button" onclick="handleResponse(false)">No</button>
                <button class="button reset-button" onclick="resetPrayer()">Reset</button>
            </div>
            <div class="button-group" id="prayerButtons"></div>
        </div>
    </div>

    <script>
        const PRAYERS = ['Fajr', 'Dhuhr', 'Asr', 'Maghrib', 'Isha'];
        const DAYS_IN_MONTH = 30;

        class PrayerTracker {
            constructor() {
                this.state = {
                    selectedDay: null,
                    selectedPrayer: null,
                    prayers: {},
                    showResponse: false
                };

                this.elements = {
                    calendar: document.getElementById('calendar'),
                    prayerStatus: document.getElementById('prayerStatus'),
                    selectedDate: document.getElementById('selectedDate'),
                    prayerButtons: document.getElementById('prayerButtons'),
                    responseButtons: document.getElementById('responseButtons'),
                    prayerQuestion: document.getElementById('prayerQuestion')
                };

                this.init();
                this.setupDateTime();
            }

            setupDateTime() {
                const updateDate = () => {
                    const date = new Date();
                    const options = { year: 'numeric', month: 'long' };
                    document.getElementById('currentDate').textContent = date.toLocaleDateString('en-US', options);
                };

                const updateTimer = () => {
                    const now = new Date();
                    const time = now.toLocaleTimeString('en-US', { hour12: false, hour: '2-digit', minute: '2-digit', second: '2-digit' });
                    document.getElementById('timer').textContent = time;
                };

                updateDate();
                updateTimer();
                setInterval(updateTimer, 1000);
                setInterval(updateDate, 60000);
            }

            init() {
                this.createCalendar();
                this.createPrayerButtons();
                this.loadData();
            }

            createCalendar() {
                for (let day = 1; day <= DAYS_IN_MONTH; day++) {
                    const dayElement = document.createElement('div');
                    dayElement.className = 'day';
                    dayElement.textContent = day;
                    dayElement.onclick = () => this.selectDay(day);
                    this.elements.calendar.appendChild(dayElement);
                }
            }

            createPrayerButtons() {
                PRAYERS.forEach(prayer => {
                    const button = document.createElement('button');
                    button.className = 'button prayer-button';
                    button.textContent = prayer;
                    button.onclick = () => this.selectPrayer(prayer);
                    this.elements.prayerButtons.appendChild(button);
                });
            }

            selectDay(day) {
                this.state.selectedDay = day;
                this.state.showResponse = false;
                this.updateUI();
            }

            selectPrayer(prayer) {
                this.state.selectedPrayer = prayer;
                this.state.showResponse = true;
                this.updateUI();
            }

            handleResponse(completed) {
                const { selectedDay, selectedPrayer } = this.state;
                if (!selectedDay || !selectedPrayer) return;

                const dayData = this.state.prayers[selectedDay] || { completed: false, hasNo: false, prayers: [] };

                if (!completed) {
                    dayData.hasNo = true;
                    dayData.completed = false;
                    const button = Array.from(this.elements.prayerButtons.children)
                        .find(btn => btn.textContent === selectedPrayer);
                    if (button) {
                        button.classList.add('no');
                        button.classList.remove('completed');
                    }
                } else {
                    if (!dayData.prayers.includes(selectedPrayer)) {
                        dayData.prayers.push(selectedPrayer);
                    }
                    dayData.hasNo = false;
                    dayData.completed = dayData.prayers.length === 5;
                    const button = Array.from(this.elements.prayerButtons.children)
                        .find(btn => btn.textContent === selectedPrayer);
                    if (button) {
                        button.classList.add('completed');
                        button.classList.remove('no');
                    }
                }

                this.state.prayers[selectedDay] = dayData;
                this.state.showResponse = false;
                this.saveData();
                this.updateUI();
            }

            resetPrayer() {
                const { selectedDay, selectedPrayer } = this.state;
                if (!selectedDay || !selectedPrayer) return;

                const dayData = this.state.prayers[selectedDay] || { completed: false, hasNo: false, prayers: [] };

                dayData.prayers = dayData.prayers.filter(prayer => prayer !== selectedPrayer);
                dayData.hasNo = false;
                dayData.completed = dayData.prayers.length === 5;

                this.state.prayers[selectedDay] = dayData;
                this.state.showResponse = false;
                this.saveData();
                this.updateUI();
            }

            updateUI() {
                const { selectedDay, showResponse, prayers } = this.state;

                this.elements.selectedDate.textContent = `Day ${selectedDay}`;
                this.elements.prayerStatus.classList.toggle('hidden', !selectedDay);
                this.elements.responseButtons.classList.toggle('hidden', !showResponse);
                this.elements.prayerButtons.classList.toggle('hidden', showResponse);
                this.elements.prayerQuestion.classList.toggle('hidden', !showResponse);

                if (showResponse) {
                    this.elements.prayerQuestion.textContent = `Did you complete ${this.state.selectedPrayer}?`;
                }

                document.querySelectorAll('.day').forEach(dayElement => {
                    const dayNum = parseInt(dayElement.textContent);
                    const dayData = prayers[dayNum];

                    dayElement.classList.remove('completed', 'incomplete');

                    if (dayData?.completed) {
                        dayElement.classList.add('completed');
                    } else if (dayData?.hasNo) {
                        dayElement.classList.add('incomplete');
                    }
                });

                if (selectedDay) {
                    const dayData = this.state.prayers[selectedDay];
                    const dayPrayers = dayData?.prayers || [];

                    this.elements.prayerButtons.querySelectorAll('.prayer-button')
                        .forEach(button => {
                            button.classList.remove('completed', 'no');

                            if (dayPrayers.includes(button.textContent)) {
                                button.classList.add('completed');
                            } else if (dayData?.hasNo) {
                                button.classList.add('no');
                            }
                        });
                }
            }

            saveData() {
                localStorage.setItem('prayerData', JSON.stringify(this.state.prayers));
            }

            loadData() {
                const saved = localStorage.getItem('prayerData');
                if (saved) {
                    this.state.prayers = JSON.parse(saved);
                    this.updateUI();
                }
            }
        }

        const app = new PrayerTracker();

        function handleResponse(completed) {
            app.handleResponse(completed);
        }

        function resetPrayer() {
            app.resetPrayer();
        }
    </script>
</body>
</html>
